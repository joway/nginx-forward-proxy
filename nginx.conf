error_log /dev/stdout info;
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    use   epoll;
    multi_accept on;
    worker_connections  15000;
}

http {
  # google's DNS server
  resolver 8.8.4.4;
  resolver_timeout 5s;

  access_log /dev/stdout;
 
  server {
    listen 80;

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_buffers 8 16k;
      proxy_http_version 1.1;
      proxy_connect_timeout 5s;
      proxy_read_timeout 30s;

      proxy_redirect off;
      set $target '';
      content_by_lua_block {
        ngx.req.read_body()
        local args, err = ngx.req.get_uri_args()
        local target = string.sub(ngx.var.request_uri, 2, string.len(ngx.var.request_uri))
        local http = require "resty.http"
        local httpc = http.new()
        local res, err = httpc:request_uri(
            target,
            {
              method = ngx.req.get_method(),
              body = args.data,
              ssl_verify = false,
            }
        )
        if res == nil then
          ngx.status = 439
          print("failed")
        else
          ngx.status = res.status
          ngx.header.content_type = res.headers["Content-Type"]
          ngx.say(res.body)
          print("success")
        end
      }
    }
  }
}
